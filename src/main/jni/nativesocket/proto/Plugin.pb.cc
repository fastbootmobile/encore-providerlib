// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Plugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Plugin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace omnimusic {

namespace {

const ::google::protobuf::Descriptor* AudioData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AudioResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AudioResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FormatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Plugin_2eproto() {
  protobuf_AddDesc_Plugin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Plugin.proto");
  GOOGLE_CHECK(file != NULL);
  AudioData_descriptor_ = file->message_type(0);
  static const int AudioData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, samples_),
  };
  AudioData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioData_descriptor_,
      AudioData::default_instance_,
      AudioData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioData));
  AudioResponse_descriptor_ = file->message_type(1);
  static const int AudioResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioResponse, written_),
  };
  AudioResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AudioResponse_descriptor_,
      AudioResponse::default_instance_,
      AudioResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AudioResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AudioResponse));
  Request_descriptor_ = file->message_type(2);
  static const int Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_RequestType_descriptor_ = Request_descriptor_->enum_type(0);
  FormatInfo_descriptor_ = file->message_type(3);
  static const int FormatInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatInfo, sampling_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatInfo, channels_),
  };
  FormatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormatInfo_descriptor_,
      FormatInfo::default_instance_,
      FormatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormatInfo));
  BufferInfo_descriptor_ = file->message_type(4);
  static const int BufferInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, stutter_),
  };
  BufferInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferInfo_descriptor_,
      BufferInfo::default_instance_,
      BufferInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Plugin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioData_descriptor_, &AudioData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AudioResponse_descriptor_, &AudioResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormatInfo_descriptor_, &FormatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferInfo_descriptor_, &BufferInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Plugin_2eproto() {
  delete AudioData::default_instance_;
  delete AudioData_reflection_;
  delete AudioResponse::default_instance_;
  delete AudioResponse_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete FormatInfo::default_instance_;
  delete FormatInfo_reflection_;
  delete BufferInfo::default_instance_;
  delete BufferInfo_reflection_;
}

void protobuf_AddDesc_Plugin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Plugin.proto\022\tomnimusic\"\034\n\tAudioData\022\017"
    "\n\007samples\030\001 \002(\014\" \n\rAudioResponse\022\017\n\007writ"
    "ten\030\001 \002(\005\"k\n\007Request\022/\n\007request\030\001 \002(\0162\036."
    "omnimusic.Request.RequestType\"/\n\013Request"
    "Type\022\017\n\013FORMAT_INFO\020\000\022\017\n\013BUFFER_INFO\020\001\"5"
    "\n\nFormatInfo\022\025\n\rsampling_rate\030\001 \002(\005\022\020\n\010c"
    "hannels\030\002 \002(\005\".\n\nBufferInfo\022\017\n\007samples\030\001"
    " \002(\005\022\017\n\007stutter\030\002 \002(\005", 301);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Plugin.proto", &protobuf_RegisterTypes);
  AudioData::default_instance_ = new AudioData();
  AudioResponse::default_instance_ = new AudioResponse();
  Request::default_instance_ = new Request();
  FormatInfo::default_instance_ = new FormatInfo();
  BufferInfo::default_instance_ = new BufferInfo();
  AudioData::default_instance_->InitAsDefaultInstance();
  AudioResponse::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  FormatInfo::default_instance_->InitAsDefaultInstance();
  BufferInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Plugin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Plugin_2eproto {
  StaticDescriptorInitializer_Plugin_2eproto() {
    protobuf_AddDesc_Plugin_2eproto();
  }
} static_descriptor_initializer_Plugin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AudioData::kSamplesFieldNumber;
#endif  // !_MSC_VER

AudioData::AudioData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:omnimusic.AudioData)
}

void AudioData::InitAsDefaultInstance() {
}

AudioData::AudioData(const AudioData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:omnimusic.AudioData)
}

void AudioData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  samples_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioData::~AudioData() {
  // @@protoc_insertion_point(destructor:omnimusic.AudioData)
  SharedDtor();
}

void AudioData::SharedDtor() {
  if (samples_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete samples_;
  }
  if (this != default_instance_) {
  }
}

void AudioData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioData_descriptor_;
}

const AudioData& AudioData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Plugin_2eproto();
  return *default_instance_;
}

AudioData* AudioData::default_instance_ = NULL;

AudioData* AudioData::New() const {
  return new AudioData;
}

void AudioData::Clear() {
  if (has_samples()) {
    if (samples_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      samples_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:omnimusic.AudioData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes samples = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:omnimusic.AudioData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:omnimusic.AudioData)
  return false;
#undef DO_
}

void AudioData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:omnimusic.AudioData)
  // required bytes samples = 1;
  if (has_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->samples(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:omnimusic.AudioData)
}

::google::protobuf::uint8* AudioData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:omnimusic.AudioData)
  // required bytes samples = 1;
  if (has_samples()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->samples(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:omnimusic.AudioData)
  return target;
}

int AudioData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes samples = 1;
    if (has_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->samples());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioData::MergeFrom(const AudioData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_samples()) {
      set_samples(from.samples());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioData::CopyFrom(const AudioData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AudioData::Swap(AudioData* other) {
  if (other != this) {
    std::swap(samples_, other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioData_descriptor_;
  metadata.reflection = AudioData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AudioResponse::kWrittenFieldNumber;
#endif  // !_MSC_VER

AudioResponse::AudioResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:omnimusic.AudioResponse)
}

void AudioResponse::InitAsDefaultInstance() {
}

AudioResponse::AudioResponse(const AudioResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:omnimusic.AudioResponse)
}

void AudioResponse::SharedCtor() {
  _cached_size_ = 0;
  written_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AudioResponse::~AudioResponse() {
  // @@protoc_insertion_point(destructor:omnimusic.AudioResponse)
  SharedDtor();
}

void AudioResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AudioResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AudioResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AudioResponse_descriptor_;
}

const AudioResponse& AudioResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Plugin_2eproto();
  return *default_instance_;
}

AudioResponse* AudioResponse::default_instance_ = NULL;

AudioResponse* AudioResponse::New() const {
  return new AudioResponse;
}

void AudioResponse::Clear() {
  written_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AudioResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:omnimusic.AudioResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 written = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &written_)));
          set_has_written();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:omnimusic.AudioResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:omnimusic.AudioResponse)
  return false;
#undef DO_
}

void AudioResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:omnimusic.AudioResponse)
  // required int32 written = 1;
  if (has_written()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->written(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:omnimusic.AudioResponse)
}

::google::protobuf::uint8* AudioResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:omnimusic.AudioResponse)
  // required int32 written = 1;
  if (has_written()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->written(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:omnimusic.AudioResponse)
  return target;
}

int AudioResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 written = 1;
    if (has_written()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->written());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AudioResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AudioResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AudioResponse::MergeFrom(const AudioResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_written()) {
      set_written(from.written());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AudioResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioResponse::CopyFrom(const AudioResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AudioResponse::Swap(AudioResponse* other) {
  if (other != this) {
    std::swap(written_, other->written_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AudioResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AudioResponse_descriptor_;
  metadata.reflection = AudioResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_RequestType_descriptor_;
}
bool Request_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_RequestType Request::FORMAT_INFO;
const Request_RequestType Request::BUFFER_INFO;
const Request_RequestType Request::RequestType_MIN;
const Request_RequestType Request::RequestType_MAX;
const int Request::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kRequestFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:omnimusic.Request)
}

void Request::InitAsDefaultInstance() {
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:omnimusic.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  request_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:omnimusic.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Plugin_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  request_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:omnimusic.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .omnimusic.Request.RequestType request = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::omnimusic::Request_RequestType_IsValid(value)) {
            set_request(static_cast< ::omnimusic::Request_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:omnimusic.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:omnimusic.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:omnimusic.Request)
  // required .omnimusic.Request.RequestType request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:omnimusic.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:omnimusic.Request)
  // required .omnimusic.Request.RequestType request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:omnimusic.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .omnimusic.Request.RequestType request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request()) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormatInfo::kSamplingRateFieldNumber;
const int FormatInfo::kChannelsFieldNumber;
#endif  // !_MSC_VER

FormatInfo::FormatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:omnimusic.FormatInfo)
}

void FormatInfo::InitAsDefaultInstance() {
}

FormatInfo::FormatInfo(const FormatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:omnimusic.FormatInfo)
}

void FormatInfo::SharedCtor() {
  _cached_size_ = 0;
  sampling_rate_ = 0;
  channels_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormatInfo::~FormatInfo() {
  // @@protoc_insertion_point(destructor:omnimusic.FormatInfo)
  SharedDtor();
}

void FormatInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FormatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormatInfo_descriptor_;
}

const FormatInfo& FormatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Plugin_2eproto();
  return *default_instance_;
}

FormatInfo* FormatInfo::default_instance_ = NULL;

FormatInfo* FormatInfo::New() const {
  return new FormatInfo;
}

void FormatInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FormatInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sampling_rate_, channels_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:omnimusic.FormatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sampling_rate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sampling_rate_)));
          set_has_sampling_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_channels;
        break;
      }

      // required int32 channels = 2;
      case 2: {
        if (tag == 16) {
         parse_channels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channels_)));
          set_has_channels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:omnimusic.FormatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:omnimusic.FormatInfo)
  return false;
#undef DO_
}

void FormatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:omnimusic.FormatInfo)
  // required int32 sampling_rate = 1;
  if (has_sampling_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sampling_rate(), output);
  }

  // required int32 channels = 2;
  if (has_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:omnimusic.FormatInfo)
}

::google::protobuf::uint8* FormatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:omnimusic.FormatInfo)
  // required int32 sampling_rate = 1;
  if (has_sampling_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sampling_rate(), target);
  }

  // required int32 channels = 2;
  if (has_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:omnimusic.FormatInfo)
  return target;
}

int FormatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sampling_rate = 1;
    if (has_sampling_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sampling_rate());
    }

    // required int32 channels = 2;
    if (has_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channels());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormatInfo::MergeFrom(const FormatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sampling_rate()) {
      set_sampling_rate(from.sampling_rate());
    }
    if (from.has_channels()) {
      set_channels(from.channels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatInfo::CopyFrom(const FormatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FormatInfo::Swap(FormatInfo* other) {
  if (other != this) {
    std::swap(sampling_rate_, other->sampling_rate_);
    std::swap(channels_, other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormatInfo_descriptor_;
  metadata.reflection = FormatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BufferInfo::kSamplesFieldNumber;
const int BufferInfo::kStutterFieldNumber;
#endif  // !_MSC_VER

BufferInfo::BufferInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:omnimusic.BufferInfo)
}

void BufferInfo::InitAsDefaultInstance() {
}

BufferInfo::BufferInfo(const BufferInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:omnimusic.BufferInfo)
}

void BufferInfo::SharedCtor() {
  _cached_size_ = 0;
  samples_ = 0;
  stutter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferInfo::~BufferInfo() {
  // @@protoc_insertion_point(destructor:omnimusic.BufferInfo)
  SharedDtor();
}

void BufferInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BufferInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferInfo_descriptor_;
}

const BufferInfo& BufferInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Plugin_2eproto();
  return *default_instance_;
}

BufferInfo* BufferInfo::default_instance_ = NULL;

BufferInfo* BufferInfo::New() const {
  return new BufferInfo;
}

void BufferInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BufferInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(samples_, stutter_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:omnimusic.BufferInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 samples = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samples_)));
          set_has_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stutter;
        break;
      }

      // required int32 stutter = 2;
      case 2: {
        if (tag == 16) {
         parse_stutter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stutter_)));
          set_has_stutter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:omnimusic.BufferInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:omnimusic.BufferInfo)
  return false;
#undef DO_
}

void BufferInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:omnimusic.BufferInfo)
  // required int32 samples = 1;
  if (has_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->samples(), output);
  }

  // required int32 stutter = 2;
  if (has_stutter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stutter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:omnimusic.BufferInfo)
}

::google::protobuf::uint8* BufferInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:omnimusic.BufferInfo)
  // required int32 samples = 1;
  if (has_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->samples(), target);
  }

  // required int32 stutter = 2;
  if (has_stutter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stutter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:omnimusic.BufferInfo)
  return target;
}

int BufferInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 samples = 1;
    if (has_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->samples());
    }

    // required int32 stutter = 2;
    if (has_stutter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stutter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferInfo::MergeFrom(const BufferInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_samples()) {
      set_samples(from.samples());
    }
    if (from.has_stutter()) {
      set_stutter(from.stutter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferInfo::CopyFrom(const BufferInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BufferInfo::Swap(BufferInfo* other) {
  if (other != this) {
    std::swap(samples_, other->samples_);
    std::swap(stutter_, other->stutter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BufferInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferInfo_descriptor_;
  metadata.reflection = BufferInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace omnimusic

// @@protoc_insertion_point(global_scope)
